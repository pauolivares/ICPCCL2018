#include <bits/stdc++.h>
using namespace std;
vector < vector  <int> > adj;

int posicion(int x){
  for(int i = 0; i < 5; i++)if(adj[x][i] == -1)return i;
			      return -1; 
}

char rotar(char objetivo){
  if(objetivo == '+'){
    return '+';
  }
  if(objetivo == '-'){
    return '|';
  }
  if(objetivo == '|'){
    return '-';
  }
  if(objetivo == '^'){
    return '>';
  }
  if(objetivo == '>'){
    return 'v';
  }
  if(objetivo == '<'){
    return '^';
  }
  if(objetivo == 'v'){
    return '<';
  }
  if(objetivo == 'L'){
    return 'U';
  }
  if(objetivo == 'R'){
    return 'D';
  }
  if(objetivo == 'U'){
    return 'R';
  }
  if(objetivo == 'D'){
    return 'L';
  }
  if(objetivo == '*'){
      return '*';
  }
}
bool movimiento(int inicio, char objetivo){
  if(inicio == 1){
    if(objetivo == '+'){
      return true;
    }
    if(objetivo == '|'){
      return true;
    }
    if(objetivo == '^'){
      return true;
    }
    if(objetivo == 'L'){
      return true;
    }
    if(objetivo == 'R'){
      return true;
    }
    if(objetivo == 'D'){
      return true;
    }
    else return false;
  }
  if(inicio == 2){
    if(objetivo == '+'){
      return true;
    }
    if(objetivo == '-'){
      return true;
    }
    if(objetivo == '>'){
      return true;
    }
    if(objetivo == 'L'){
      return true;
    }
    if(objetivo == 'U'){
      return true;
    }
    if(objetivo == 'D'){
      return true;
    }
    else return false;
  }
  if(inicio == 3){
    if(objetivo == '+'){
      return true;
    }
    if(objetivo == '|'){
      return true;
    }
    if(objetivo == 'v'){
      return true;
    }
    if(objetivo == 'L'){
      return true;
    }
    if(objetivo == 'R'){
      return true;
    }
    if(objetivo == 'U'){
      return true;
    }
    else return false;
  }
  if(inicio == 4){
    if(objetivo == '+'){
      return true;
    }
    if(objetivo == '-'){
      return true;
    }
    if(objetivo == '<'){
      return true;
    }
    if(objetivo == 'R'){
      return true;
    }
    if(objetivo == 'U'){
      return true;
    }
    if(objetivo == 'D'){
      return true;
    }
    else return false;
  }

}

int main(){
  int n, m,tx,ty,mx,my,a,b;
  char c;
  scanf("%d %d",&n,&m);
  int desplazo,desplazo2;
  vector <int> visitado(n*m*4,99999999);
  adj.resize(n*m*4,vector <int>(5,-1));
  vector < vector <vector  <char> > > mapa(4,vector < vector <char> >(n, vector <char>(m)));
  for(int i = 0; i < n; i++){
    for(int j = 0;j < m; j++){
      cin >> c;
      mapa[0][i][j] = c;
    }
  }
  for(int i = 1; i < 4; i++){
    for(int j = 0; j < n; j++){
      for(int k = 0; k < m; k++){
	mapa[i][j][k] = rotar(mapa[i-1][j][k]);
      }
    }
  }
  for(int i = 0; i < 4; i++){
    desplazo = i*n*m;
    for(int j = 0; j < n-1; j++){
      for(int k = 0; k < m; k++){
	if(k < m-1)if(movimiento(2,mapa[i][j][k]) && movimiento(4,mapa[i][j][k+1])){
	    a = posicion(desplazo + j*m + k);
	    b = posicion(desplazo + j*m + k + 1);
	    adj[desplazo + j*m + k][a] = (desplazo + j*m + k + 1);
	    adj[desplazo + j*m + k + 1][b] = (desplazo + j*m + k);
	  }
	if(movimiento(3,mapa[i][j][k]) && movimiento(1,mapa[i][j+1][k])){
	  a = posicion(desplazo + j*m + k);
	  b = posicion(desplazo + (j+1)*m + k);
	  adj[desplazo + j*m + k][a] = (desplazo + (j+1)*m + k );
	  adj[desplazo + (j+1)*m + k][b] = (desplazo + j*m + k);
	}				
      }
    }
    for(int k = 0; k < m-1; k++){
      if(movimiento(2,mapa[i][n-1][k]) && movimiento(4,mapa[i][n-1][k+1])){
	a = posicion(desplazo + (n-1)*m + k);
	b = posicion(desplazo + (n-1)*m + k + 1);
	adj[desplazo + (n-1)*m + k][a] = (desplazo + (n-1)*m + k + 1);
	adj[desplazo + (n-1)*m + k + 1][b] = (desplazo + (n-1)*m + k);
      }
    }
  }
  for(int i = 0; i < 4; i++){
    int conectar = (i+1)%4;
    desplazo = i*n*m;
    desplazo2 = conectar*n*m;
    for(int j = 0; j < n; j++){
      for(int k = 0; k < m; k++){
	a = posicion(desplazo+j*m+k);
	adj[desplazo+j*m+k][a] = (desplazo2+j*m+k);
      }
    }
  }
  scanf("%d %d %d %d",&ty,&tx,&my,&mx);
  ty--;
  tx--;
  my--;
  mx--;
  int teseo = ty*m + tx;
  int minotauro = my*m + mx;
  int minimo = 99999999;
  queue <int> q;
  q.push(teseo);
  visitado[teseo] = 0;
  while(!q.empty()){
    int nodo = q.front();
    q.pop();
    for(int i = 0; i < adj[nodo].size();i++){
      if(adj[nodo][i] == -1)break;
      if(visitado[adj[nodo][i]] == 99999999){
	visitado[adj[nodo][i]] = visitado[nodo]+1;
	q.push(adj[nodo][i]);
      }
    }
  }
  for(int i = 0; i < 4; i++){
    if(visitado[i*(n*m) + minotauro] < minimo) minimo = visitado[i*(n*m) + minotauro];
  }
  if(minimo == 99999999)puts("-1");
  else printf("%d\n",minimo);
  return 0;
}
